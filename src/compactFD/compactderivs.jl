#===============================================
#
#
#
================================================#
function dT4(n, h)
    dl = fill(0.25,n-1)
    du = fill(0.25,n-1)
    d = ones(n)
    dl[n-1] = 3.0
    du[1] = 3.0
    A = Tridiagonal(dl, d, du)
    
    B = zeros(n,n)
    hm1 = 1.0/h
    t1 = 0.75*hm1
    for i = 2:n-1
        B[i-1,i] = t1
        B[i+1,i] = -t1
    end
    
    B[1,1] = -17.0/6.0*hm1
    B[2,1] = -t1
    B[1,2] = 1.5*hm1
    B[1,3] = 1.5*hm1
    B[1,4] = -1.0/6.0*hm1

    B[n-1,n] = t1
    B[n,n-3] = 1.0/6.0*hm1
    B[n,n-2] = -1.5*hm1
    B[n,n-1] = -1.5*hm1
    B[n,n] = 17.0/6.0*hm1
    
    return A, B
end

#===============================================
#
#
#
================================================#
function dT6(n, h)
    third = 1.0/3.0
    dl = fill(third, n-1)
    du = fill(third, n-1)
    d = ones(n)
    dl[1] = 2.0/11.0
    dl[n-2] = 2.0/11.0
    dl[n-1] = 5.0
    du[1] = 5.0
    du[2] = 2.0/11.0
    du[n-1] = 2.0/11.0
    A = Tridiagonal(dl, d, du)
    
    hm1 = 1.0/h
    B = zeros(n,n)
    t1 = 1.0/36.0*hm1
    t2 = 7.0/9.0*hm1
    for j = 3:n-2
        B[j-2,j] =  t1
        B[j-1,j] =  t2
        B[j+1,j] = -t2
        B[j+2,j] = -t1
    end
    
    B[1,1] = -197.0/60.0*hm1
    B[2,1] = -20.0/33.0*hm1
    B[3,1] = -t1
    
    B[1,2] = -5.0/12.0*hm1
    B[2,2] = -35.0/132.0*hm1
    B[3,2] = -t2
    B[4,2] = -t1
    
    B[1,3] = 5.0*hm1
    B[2,3] = 34.0/33.0*hm1
    
    B[1,4] = -5.0/3.0*hm1
    B[2,4] = -7.0/33.0*hm1
    
    B[1,5] = 5.0/12.0*hm1
    B[2,5] = 2.0/33.0*hm1
    
    B[1,6] = -1.0/20.0*hm1
    B[2,6] = -1.0/132.0*hm1
    
    B[n-1,n-5] = 1.0/132.0*hm1
    B[n,n-5] = 1.0/20.0*hm1
    
    B[n-1,n-4] = -2.0/33.0*hm1
    B[n,n-4] = -5.0/12.0*hm1
    
    B[n-1,n-3] = 7.0/33.0*hm1
    B[n,n-3] = 5.0/3.0*hm1
    
    B[n-1,n-2] = -34.0/33.0*hm1
    B[n,n-2] = -5.0*hm1
    
    B[n-3,n-1] = t1
    B[n-2,n-1] = t2
    B[n-1,n-1] = 35.0/132.0*hm1
    B[n,n-1] = 5.0/12.0*hm1
    
    B[n-2,n] = t1
    B[n-1,n] = 20.0/33.0*hm1
    B[n,n] = 197.0/60.0*hm1
    
    return A, B
end  

#===============================================
#
#
#
================================================#
function dP6(n,h)
 
    A = BandedMatrix{Float64}(undef(n,n),(2,2))

    t1 = -1.0/114.0
    t2 = 17.0/57.0
    for i = 3:nx-2
        A[i,i-2] = t1
        A[i,i-1] = t2
        A[i,i] = 1.0
        A[i,i+1] = t2
        A[i,i+2] = t1
    end

    A[1,1] = 1.0
    A[1,2] = t2
    A[1,3] = t1

    A[2,1] = 1.0
    A[2,2] = 1.0
    A[2,3] = t2
    A[2,4] = t1

    A[2,4] = 8.0
    A[3,5] = 6.0
    A[n,n] = 1.0
    A[2,4] = 8.0
    A[3,5] = 6.0

    return A, B
end

#===============================================
#
#
#
================================================#
function ddT4(n,h)
    
    dl = fill(0.1,n-1)
    du = fill(0.1,n-1)
    d = ones(n)
    dl[n-1] = 10.0
    du[1] = 10.0
    A = Tridiagonal(dl, d, du)
    
    B = zeros(n,n)
    hm2 = 1.0/(h*h)
    a = 6.0/5.0
    for i = 2:n-1
        B[i,i-1] = a*hm2
        B[i,i] = -2.0*a*hm2
        B[i,i+1] = a*hm2
    end
    
    # points 1, N
    B[1,1] = 145.0/12*hm2
    B[1,2] = - 76.0/3*hm2
    B[1,3] = 29.0/2*hm2
    B[1,4] = -4.0/3*hm2
    B[1,5] = 1.0/12*hm2
    
    B[n,n] = 145.0/12*hm2
    B[n,n-1] = - 76.0/3*hm2
    B[n,n-2] = 29.0/2*hm2
    B[n,n-3] = -4.0/3*hm2
    B[n,n-4] = 1.0/12*hm2
    
    return A,B
end

#===============================================
#
#
#
================================================#
function ddT6(n,h)
    t1 = 2.0/11.0
    dl = fill(t1,n-1)
    du = fill(t1,n-1)
    dl[1] = 11.0/128.0
    dl[n-2] = 11.0/128.0
    dl[n-1] = 126.0/11.0
    du[1] = 126.0/11.0
    du[2] = 11.0/128.0
    du[n-1] = 11.0/128.0
    d = ones(n)
    A = Tridiagonal(dl, d, du)
    
    B = zeros(n,n)
    hm2 = 1.0/(h*h)
    t1 = 3.0/44.0
    t2 = 12.0/11.0
    t3 = -2.0*t1 -2.0*t2
    for i = 3:n-2
        B[i,i-2] = t1*hm2
        B[i,i-1] = t2*hm2
        B[i,i] = t3*hm2
        B[i,i+1] = t2*hm2
        B[i,i+2] = t1*hm2
    end
    
    # points 1, N
    B[1,1] = 2077.0/157*hm2
    B[1,2] = -2943.0/110*hm2
    B[1,3] = 573.0/44*hm2
    B[1,4] = 167.0/99*hm2
    B[1,5] = -18.0/11*hm2
    B[1,6] = 57.0/110*hm2
    B[1,7] = -131.0/1980*hm2
    
    B[2,1] = 585.0/512*hm2
    B[2,2] = -141.0/64*hm2
    B[2,3] = 459.0/512*hm2
    B[2,4] = 9.0/32*hm2
    B[2,5] = -81.0/512*hm2
    B[2,6] = 3.0/64*hm2
    B[2,7] = -3.0/512*hm2
    
    B[n-1,n] = 585.0/512*hm2
    B[n-1,n-1] = -141.0/64*hm2
    B[n-1,n-2] = 459.0/512*hm2
    B[n-1,n-3] = 9.0/32*hm2
    B[n-1,n-4] = -81.0/512*hm2
    B[n-1,n-5] = 3.0/64*hm2
    B[n-1,n-6] = -3.0/512*hm2
    
    B[n,n] = 2077.0/157*hm2
    B[n,n-1] = -2943.0/110*hm2
    B[n,n-2] = 573.0/44*hm2
    B[n,n-3] = 167.0/99*hm2
    B[n,n-4] = -18.0/11*hm2
    B[n,n-5] = 57.0/110*hm2
    B[n,n-6] = -131.0/1980*hm2   
    
    return A,B
end


#===============================================
#
#
#
================================================#
function filterT6(n, alpha)
    dl = fill(alpha, n-1)
    du = fill(alpha, n-1)
    d = ones(n)
    A = Tridiagonal(dl, d, du)
    
    B = zeros(n,n)
    
    a = (11 + 10*alpha)/16
    b = (15 + 34*alpha)/32
    c = (-3 + 6*alpha)/16
    d = (1 - 2*alpha)/32

    for i = 4:n-3
        B[i,i-3] = d/2.0
        B[i,i-2] = c/2.0
        B[i,i-1] = b/2.0
        B[i,i] = a
        B[i,i+1] = b/2.0
        B[i,i+2] = c/2.0
        B[i,i+3] = d/2.0
    end
    
    B[1,1] = (63 + alpha) / 64
    B[1,2] = (3 + 29 * alpha) / 32
    B[1,3] = 15 * (-1 + alpha) / 64
    B[1,4] = 5 * (1 - alpha) / 16
    B[1,5] = 15 * (-1 + alpha) / 64
    B[1,6] = 3 * (1 - alpha) / 32
    B[1,7] = (-1 + alpha) / 64
    
    B[2,1] = (1 + 62 * alpha) / 64
    B[2,2] = (29 + 6 * alpha) / 32
    B[2,3] = (15 + 34 * alpha) / 64
    B[2,4] = (-5 + 10 * alpha) / 16
    B[2,5] = 15 * (1 - 2 * alpha) / 64
    B[2,6] = 3 * (-1 + 2 * alpha) / 32
    B[2,7] = (1 - 2 * alpha) / 64
    
    B[3,1] = (-1 + 2 * alpha) / 64
    B[3,2] = (3 + 26 * alpha) / 32
    B[3,3] = (49 + 30 * alpha) / 64
    B[3,4] = (5 + 6 * alpha) / 16
    B[3,5] = 15 * (-1 + 2 * alpha) / 64
    B[3,6] = 3 * (1 - 2 * alpha) / 32
    B[3,7] = (-1 + 2 * alpha) / 64
    
    B[n-2,n] = (-1 + 2 * alpha) / 64
    B[n-2,n-1] = (3 + 26 * alpha) / 32
    B[n-2,n-2] = (49 + 30 * alpha) / 64
    B[n-2,n-3] = (5 + 6 * alpha) / 16
    B[n-2,n-4] = 15 * (-1 + 2 * alpha) / 64
    B[n-2,n-5] = 3 * (1 - 2 * alpha) / 32
    B[n-2,n-6] = (-1 + 2 * alpha) / 64
    
    B[n-1,n] = (1 + 62 * alpha) / 64
    B[n-1,n-1] = (29 + 6 * alpha) / 32
    B[n-1,n-2] = (15 + 34 * alpha) / 64
    B[n-1,n-3] = (-5 + 10 * alpha) / 16
    B[n-1,n-4] = 15 * (1 - 2 * alpha) / 64
    B[n-1,n-5] = 3 * (-1 + 2 * alpha) / 32
    B[n-1,n-6] = (1 - 2 * alpha) / 64
    
    B[n,n] = (63 + alpha) / 64
    B[n,n-1] = (3 + 29 * alpha) / 32
    B[n,n-2] = 15 * (-1 + alpha) / 64
    B[n,n-3] = 5 * (1 - alpha) / 16
    B[n,n-4] = 15 * (-1 + alpha) / 64
    B[n,n-5] = 3 * (1 - alpha) / 32
    B[n,n-6] = (-1 + alpha) / 64
    
    return A, B
end

#===============================================
#
#
#
================================================#
function filterT8(n, alpha)
    dl = fill(alpha, n-1)
    du = fill(alpha, n-1)
    d = ones(n)
    A = Tridiagonal(dl, d, du)
    
    B = zeros(n,n)
    
    a = (93+70*alpha)/128
    b = (7+18*alpha)/16
    c = (-7 + 14*alpha)/32
    d = (1 -2*alpha)/16
    e = (-1 + 2*alpha)/128
    
    for i = 5:n-4
        B[i,i-4] = e/2.0
        B[i,i-3] = d/2.0
        B[i,i-2] = c/2.0
        B[i,i-1] = b/2.0
        B[i,i] = a
        B[i,i+1] = b/2.0
        B[i,i+2] = c/2.0
        B[i,i+3] = d/2.0
        B[i,i+4] = e/2.0
    end
    
    B[1,1] = (255 + alpha) / 256
    B[1,2] = (1 + 31 * alpha) / 32
    B[1,3] = (-7 + 7 * alpha) / 64
    B[1,4] = (7 - 7 * alpha) / 32
    B[1,5] = 7 * (-5 + 5 * alpha) / 128
    B[1,6] = (7 - 7 * alpha) / 32
    B[1,7] = 7 * (-1 + alpha) / 64
    B[1,8] = (1 - alpha) / 32
    B[1,9] = (-1 + alpha) / 256
    
    B[2,1] = (1 + 254 * alpha) / 256
    B[2,2] = (31 + 2 * alpha) / 32
    B[2,3] = (7 + 50 * alpha) / 64
    B[2,4] = (-7 + 14 * alpha) / 32
    B[2,5] = 7 * (5 - 10 * alpha) / 128
    B[2,6] = (-7 + 14 * alpha) / 32
    B[2,7] = (7 - 14 * alpha) / 64
    B[2,8] = (-1 + 2 * alpha) / 32
    B[2,9] = (1 - 2 * alpha) / 256
    
    B[3,1] = (-1 + 2 * alpha) / 256
    B[3,2] = (1 + 30 * alpha) / 32
    B[3,3] = (57 + 14 * alpha) / 64
    B[3,4] = (7 + 18 * alpha) / 32
    B[3,5] = 7 * (-5 + 10 * alpha) / 128
    B[3,6] = (7 - 14 * alpha) / 32
    B[3,7] = (-7 + 14 * alpha) / 64
    B[3,8] = (1 - 2 * alpha) / 32
    B[3,9] = (-1 + 2 * alpha) / 256

    B[4,1] = (1 - 2 * alpha) / 256
    B[4,2] = (-1 + 2 * alpha) / 32
    B[4,3] = (7 + 50 * alpha) / 64
    B[4,4] = (25 + 14 * alpha) / 32
    B[4,5] = (35 + 58 * alpha) / 128
    B[4,6] = (-7 + 14 * alpha) / 32
    B[4,7] = (7 - 14 * alpha) / 64
    B[4,8] = (-1 + 2 * alpha) / 32
    B[4,9] = (1 - 2 * alpha) / 256
    
    B[n-3,n] = (1 - 2 * alpha) / 256
    B[n-3,n-1] = (-1 + 2 * alpha) / 32
    B[n-3,n-2] = (7 + 50 * alpha) / 64
    B[n-3,n-3] = (25 + 14 * alpha) / 32
    B[n-3,n-4] = (35 + 58 * alpha) / 128
    B[n-3,n-5] = (-7 + 14 * alpha) / 32
    B[n-3,n-6] = (7 - 14 * alpha) / 64
    B[n-3,n-7] = (-1 + 2 * alpha) / 32
    B[n-3,n-8] = (1 - 2 * alpha) / 256
    
    B[n-2,n] = (-1 + 2 * alpha) / 256
    B[n-2,n-1] = (1 + 30 * alpha) / 32
    B[n-2,n-2] = (57 + 14 * alpha) / 64
    B[n-2,n-3] = (7 + 18 * alpha) / 32
    B[n-2,n-4] = 7 * (-5 + 10 * alpha) / 128
    B[n-2,n-5] = (7 - 14 * alpha) / 32
    B[n-2,n-6] = (-7 + 14 * alpha) / 64
    B[n-2,n-7] = (1 - 2 * alpha) / 32
    B[n-2,n-8] = (-1 + 2 * alpha) / 256
    
    B[n-1,n] = (1 + 254 * alpha) / 256
    B[n-1,n-1] = (31 + 2 * alpha) / 32
    B[n-1,n-2] = (7 + 50 * alpha) / 64
    B[n-1,n-3] = (-7 + 14 * alpha) / 32
    B[n-1,n-4] = 7 * (5 - 10 * alpha) / 128
    B[n-1,n-5] = (-7 + 14 * alpha) / 32
    B[n-1,n-6] = (7 - 14 * alpha) / 64
    B[n-1,n-7] = (-1 + 2 * alpha) / 32
    B[n-1,n-8] = (1 - 2 * alpha) / 256
    
    B[n,n] = (255 + alpha) / 256
    B[n,n-1] = (1 + 31 * alpha) / 32
    B[n,n-2] = (-7 + 7 * alpha) / 64
    B[n,n-3] = (7 - 7 * alpha) / 32
    B[n,n-4] = 7 * (-5 + 5 * alpha) / 128
    B[n,n-5] = (7 - 7 * alpha) / 32
    B[n,n-6] = 7 * (-1 + alpha) / 64
    B[n,n-7] = (1 - alpha) / 32
    B[n,n-8] = (-1 + alpha) / 256
    
    return A, B
end
